name: Bump version
description: "This action bumps package versions based on the repository's commit messages written according to the Conventional Commits specification."

inputs:
  prerelease:
    description: 'Optional prerelease identifier (e.g., alpha, beta, rc).'
    required: false
    default: ''
  major_version_zero:
    description: 'Set to true to keep the major version at zero, even for breaking changes.'
    type: boolean
    required: false
    default: false

outputs:
  version:
    description: 'The new version that packages were bumped to.'
    value: ${{ steps.get_version.outputs.version }}

runs:
  using: composite
  steps:
    - name: Get next version
      id: get_version
      shell: bash
      env:
        PRERELEASE: ${{ inputs.prerelease }}
        MAJOR_VERSION_ZERO: ${{ inputs.major_version_zero }}
      run: |
        cmd="cz bump --get-next --yes"

        if [ -n "$PRERELEASE" ]; then
          cmd="$cmd --prerelease $PRERELEASE"
        fi

        if [ "$MAJOR_VERSION_ZERO" = "true" ]; then
          cmd="$cmd --major-version-zero"
        fi

        version=$($cmd)
        echo "version=$version" >> "$GITHUB_OUTPUT"

    - name: Generate changelog
      shell: bash
      env:
        PRERELEASE: ${{ inputs.prerelease }}
        MAJOR_VERSION_ZERO: ${{ inputs.major_version_zero }}
      run: |
        cmd="cz bump --files-only --changelog --yes"

        if [ -n "$PRERELEASE" ]; then
          cmd="$cmd --prerelease $PRERELEASE"
        fi

        if [ "$MAJOR_VERSION_ZERO" = "true" ]; then
          cmd="$cmd --major-version-zero"
        fi

        $cmd
